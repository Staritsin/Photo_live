from typing import AsyncGenerator
from sqlalchemy.ext.asyncio import (
    AsyncSession,
    create_async_engine,
    async_sessionmaker,
)
from sqlalchemy.orm import declarative_base
from config import settings

# === –ë–∞–∑–æ–≤—ã–π –∫–ª–∞—Å—Å –º–æ–¥–µ–ª–µ–π ===
Base = declarative_base()

# === –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –±–∞–∑—ã ===
db_url = settings.async_database_url
is_sqlite = "sqlite" in db_url.lower()

# === SSL –∏ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–≤–∏–∂–∫–∞ ===
connect_args = {"ssl": True} if "postgresql" in db_url else {}

engine_kwargs = dict(
    echo=False,
    pool_pre_ping=True,
    connect_args=connect_args,
)

# ‚öôÔ∏è SQLite –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç pool_size / max_overflow
if not is_sqlite:
    engine_kwargs.update(pool_size=5, max_overflow=10)

# === –°–æ–∑–¥–∞—ë–º –¥–≤–∏–∂–æ–∫ ===
engine = create_async_engine(db_url, **engine_kwargs)

# === –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–∏–ø–∞ –±–∞–∑—ã ===
if is_sqlite:
    print("‚úÖ Using SQLite (Local)")
else:
    print("‚úÖ Using Postgres (Production)")

# === –°–µ—Å—Å–∏–∏ ===
SessionLocal = async_sessionmaker(
    bind=engine,
    class_=AsyncSession,
    expire_on_commit=False,
)

# === –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä —Å–µ—Å—Å–∏–π ===
from contextlib import asynccontextmanager   # üëà –¥–æ–±–∞–≤—å –≤–≤–µ—Ä—Ö—É —Ñ–∞–π–ª–∞, –µ—Å–ª–∏ –Ω–µ—Ç

@asynccontextmanager
async def get_session():
    async with SessionLocal() as session:
        yield session


# === –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ë–î ===
async def init_db() -> None:
    from . import models  # —á—Ç–æ–±—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å –º–æ–¥–µ–ª–∏
    async with engine.begin() as conn:
        await conn.run_sync(Base.metadata.create_all)
