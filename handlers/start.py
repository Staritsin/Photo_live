from telegram import Update, InlineKeyboardMarkup, InlineKeyboardButton, InputMediaVideo
from telegram.ext import ContextTypes
import asyncio

from sqlalchemy import select

from config import settings
from db.database import get_session
from db.models import User
from .utils import send_or_replace_text
from services import gsheets

from services.billing_core import calc_generations
from services import billing_core
from db.repo import get_referral_stats, has_generations




# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
def main_menu_kb(user) -> InlineKeyboardMarkup:
    buttons = []

    buttons.append([InlineKeyboardButton("‚ú® –û–∂–∏–≤–∏—Ç—å —Ñ–æ—Ç–æ", callback_data="animate")])
    buttons.append([InlineKeyboardButton("üí≥ –ü–æ–ø–æ–ª–Ω–∏—Ç—å –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏", callback_data="balance")])
    buttons.append([InlineKeyboardButton("üìñ –í–∏–¥–µ–æ - –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è", callback_data="instruction")])

    return InlineKeyboardMarkup(buttons)


# –ü—Ä–æ–≤–µ—Ä–∫–∞/—Å–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
async def ensure_user(update: Update) -> User:
    user_tg = update.effective_user

    async with get_session() as session:

        result = await session.execute(select(User).where(User.user_id == user_tg.id))
        user = result.scalar_one_or_none()

        if not user:
            # üîπ –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
            user = User(
                id=user_tg.id,
                user_id=update.effective_user.id,
                full_name=user_tg.full_name,
                username=user_tg.username,
                balance=0,
                consent_accepted=False,
            )
            session.add(user)
            await session.commit()



        else:
            # üîπ –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ
            user.full_name = user_tg.full_name
            user.username = user_tg.username
            await session.commit()

        # ‚úÖ –≤—Å–µ–≥–¥–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º billing_core-—é–∑–µ—Ä–∞
        return billing_core.get_user(user_tg.id)


# –°—Å—ã–ª–∫–∏ –Ω–∞ –¥–æ–∫—É–º–µ–Ω—Ç—ã
USER_AGREEMENT_URL = "https://clck.ru/3PEqg8"
PRIVACY_POLICY_URL = "https://clck.ru/3PEqbo"


# /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    tg_user = update.effective_user

    # 1. billing_core
    user_gen = await billing_core.upsert_user(tg_user.id, tg_user.username)

    # ‚úÖ –µ—Å–ª–∏ –≤–¥—Ä—É–≥ –≤–µ—Ä–Ω—É–ª—Å—è coroutine ‚Äî –¥–æ–∂–∏–¥–∞–µ–º—Å—è –µ–≥–æ
    if asyncio.iscoroutine(user_gen):
        user_gen = await user_gen




    # --- –ø—Ä–æ–≤–µ—Ä–∫–∞ –µ—Å—Ç—å –ª–∏ —Ä–µ—Ñ ---
    args = context.args
    if args and args[0].startswith("ref"):
        referrer_id = int(args[0].replace("ref", ""))
        if referrer_id != tg_user.id:  # –Ω–µ–ª—å–∑—è —Å–∞–º–æ–º—É —Å–µ–±–µ
            # üîπ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î
            from db.repo import add_referral
            await add_referral(inviter_id=referrer_id, invited_id=tg_user.id)

            # üîπ –ª–æ–≥–∏—Ä—É–µ–º –≤ Google Sheets (—Ç–æ–ª—å–∫–æ –¥–ª—è –Ω–∞–≥–ª—è–¥–Ω–æ—Å—Ç–∏)
            asyncio.create_task(gsheets.log_referral(
                referrer_id=referrer_id,
                new_user_id=tg_user.id,
                status="registered"
            ))

    # 2. SQLAlchemy (—Å–æ–≥–ª–∞—Å–∏–µ)
    async with get_session() as session:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º user_id
        result = await session.execute(select(User).where(User.user_id == tg_user.id))
        user_db = result.scalar_one_or_none()

        if user_db:
            print(f"‚ö°Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç ({tg_user.id}) ‚Äî –æ–±–Ω–æ–≤–ª—è—é –¥–∞–Ω–Ω—ã–µ")
            user_db.full_name = tg_user.full_name
            user_db.username = tg_user.username
            await session.commit()
        else:
            print("üÜï –°–û–ó–î–ê–Æ –ù–û–í–û–ì–û –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø")
            user_db = User(
                id=tg_user.id,
                user_id=tg_user.id,
                full_name=tg_user.full_name,
                username=tg_user.username,
                balance=0,  # üéÅ —Å—Ç–∞—Ä—Ç–æ–≤—ã–π –±–∞–ª–∞–Ω—Å
                consent_accepted=False,
            )
            session.add(user_db)
            await session.commit()
            print(f"üë§ –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–∑–¥–∞–Ω: {tg_user.id} ({tg_user.username})")

            # –õ–æ–≥–∏—Ä—É–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ Google Sheets
            asyncio.create_task(gsheets.log_unique_user(
                user_id=tg_user.id,
                username=tg_user.username or "",
                full_name=tg_user.full_name or ""
            ))

            asyncio.create_task(gsheets.log_user_event(
                user_id=tg_user.id,
                username=tg_user.username or "",
                event="start_registered",
                meta={"balance": user_db.balance}
            ))



    # –õ–æ–≥ –≤—Ö–æ–¥–∞
    asyncio.create_task(gsheets.log_user_event(
        user_id=user_gen.user_id,
        username=user_gen.username or "",
        event="start",
        meta={"generations_balance": user_gen.generations_balance}
    ))

    if not user_db.consent_accepted:
        text = (
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –æ–∑–Ω–∞–∫–æ–º—å—Ç–µ—Å—å —Å –¥–æ–∫—É–º–µ–Ω—Ç–∞–º–∏ –ø–µ—Ä–µ–¥ –Ω–∞—á–∞–ª–æ–º:\n\n"
            f"üìÑ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–µ —Å–æ–≥–ª–∞—à–µ–Ω–∏–µ:\n{USER_AGREEMENT_URL}\n\n"
            f"üîí –ü–æ–ª–∏—Ç–∏–∫–∞ –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏:\n{PRIVACY_POLICY_URL}"
        )
        kb = InlineKeyboardMarkup([[InlineKeyboardButton("‚úÖ –°–æ–≥–ª–∞—Å–µ–Ω", callback_data="consent_yes")]])
        await send_or_replace_text(update, context, text, reply_markup=kb)
        return

    # –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    await show_main_menu(update, context, user_gen)


# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
async def show_main_menu(update: Update, context: ContextTypes.DEFAULT_TYPE, user):
    gen_price = settings.price_rub
    packs = settings.packs
    

    # ---- —Ä–µ–∞–ª—å–Ω—ã–µ —Ü–∏—Ñ—Ä—ã –∏–∑ –ë–î (–∞ –Ω–µ –∏–∑ billing_core) ----
    
    async with get_session() as session:

        udb = (await session.execute(
            select(User).where(User.user_id == user.user_id)
        )).scalar_one()

        paid_balance = int(udb.balance)                # —á—Ç–æ —Ä–µ–∞–ª—å–Ω–æ —Å–ø–∏—Å—ã–≤–∞–µ—Ç—Å—è

    # —Å–∫–æ–ª—å–∫–æ –≤—Å–µ–≥–æ –Ω–∞—á–∏—Å–ª–µ–Ω–æ –∑–∞ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤ (–∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω–æ, –Ω–µ "–æ—Å—Ç–∞—Ç–æ–∫")
    invited_total, invited_paid = await get_referral_stats(user.user_id)
    bonus_total = invited_paid * settings.bonus_per_friend

    total_available = paid_balance + bonus_total


    # ---- —Ç–µ–∫—Å—Ç ----
    text = f"üëã {update.effective_user.first_name}, –∑–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ!\n"

    text += "‚ú® –ì–æ—Ç–æ–≤—ã –æ–∂–∏–≤–∏—Ç—å —Ñ–æ—Ç–æ? üöÄ\n\n"

    text += (
        "üíñ –ú—ã –ø–æ–º–æ–∂–µ–º –æ–∂–∏–≤–∏—Ç—å –¥–æ—Ä–æ–≥–∏–µ —Å–µ—Ä–¥—Ü—É —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ ‚ú®\n"
        "üéâ –ü–æ–¥–∞—Ä–∏—Ç—å —ç–º–æ—Ü–∏–∏ –∏ –ø—Ä–µ–≤—Ä–∞—Ç–∏—Ç—å —Ñ–æ—Ç–æ –≤ –∂–∏–≤—ã–µ –º–æ–º–µ–Ω—Ç—ã!\n\n"
        "*–ö–∞–∫ –æ–∂–∏–≤–∏—Ç—å —Ñ–æ—Ç–æ:*\n"
        "1Ô∏è‚É£ –ù–∞–∂–º–∏—Ç–µ ¬´‚ú® –û–∂–∏–≤–∏—Ç—å —Ñ–æ—Ç–æ¬ª\n"
        "2Ô∏è‚É£ –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é —Å —á–µ—Ç–∫–∏–º–∏ –ª–∏—Ü–∞–º–∏/–≤ –∞–Ω—Ñ–∞—Å\n"
        "3Ô∏è‚É£ –û–ø–∏—à–∏—Ç–µ, –∫–∞–∫ —Ö–æ—Ç–∏—Ç–µ –æ–∂–∏–≤–∏—Ç—å (—ç–º–æ—Ü–∏—è + –¥–µ–π—Å—Ç–≤–∏—è)\n"
        "4Ô∏è‚É£ –ü–æ–ª—É—á–∏—Ç–µ –≥–æ—Ç–æ–≤–æ–µ –≤–∏–¥–µ–æ üé¨\n"
        "5Ô∏è‚É£ –ü–æ–¥–∞—Ä–∏—Ç–µ —ç–º–æ—Ü–∏—é –±–ª–∏–∑–∫–∏–º üíå\n\n"


        f"üí∞ *–°—Ç–æ–∏–º–æ—Å—Ç—å:* 1 –æ–∂–∏–≤–ª–µ–Ω–∏–µ = 1 –≥–µ–Ω–µ—Ä–∞—Ü–∏—è = {gen_price} ‚ÇΩ\n\n"
    )
    text += (
        f"\nüßæ –í–∞—à –±–∞–ª–∞–Ω—Å –Ω–∞: {total_available} –≥–µ–Ω–µ—Ä–∞—Ü–∏–π\n"
        f"‚ú® –ù–∞—á–∏—Å–ª–µ–Ω–æ –∑–∞ –¥—Ä—É–∑–µ–π: +{bonus_total}\n\n"
        f"üì¢ –ü—Ä–∏–≥–ª–∞—à–∞–π—Ç–µ –¥—Ä—É–∑–µ–π ‚Üí –∑–∞ –∫–∞–∂–¥–æ–≥–æ –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ–ª—É—á–∞–π—Ç–µ +{settings.bonus_per_friend} –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –≤ üéÅ\n\n"
        f" (—Ç.–µ. –µ—Å–ª–∏ –≤—ã –ø—Ä–∏–≥–ª–∞—Å–∏–ª–∏ –¥—Ä—É–≥–∞, –∏ –æ–Ω –æ–ø–ª–∞—Ç–∏–ª –ª—é–±–æ–π –∏–∑ —Ç–∞—Ä–∏—Ñ–æ–≤, –≤—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ–ª—É—á–∞–µ—Ç–µ +{settings.bonus_per_friend} –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –≤ üéÅ)\n"

    )

    # ---- –∫–Ω–æ–ø–∫–∏ ----
    invite_link = f"https://t.me/Photo_AliveBot?start=ref{user.user_id}"

    # üí° –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∞—è –∫–Ω–æ–ø–∫–∞ ‚Äî –µ—Å–ª–∏ –±–∞–ª–∞–Ω—Å 0 ‚Üí –ø–æ–∫–∞–∑–∞—Ç—å —Ü–µ–Ω—É
    if total_available == 0:
        balance_label = f"üí≥ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –∑–∞ {gen_price} ‚ÇΩ"
    else:
        balance_label = "üí≥ –ü–æ–ø–æ–ª–Ω–∏—Ç—å –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏"


    kb = InlineKeyboardMarkup([
        [InlineKeyboardButton(balance_label, callback_data="balance")],
        [InlineKeyboardButton("‚ú® –û–∂–∏–≤–∏—Ç—å —Ñ–æ—Ç–æ", callback_data="animate")],
        [InlineKeyboardButton("üìñ –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è", callback_data="instruction")],
        [InlineKeyboardButton(
            "ü§ù –ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å –¥—Ä—É–≥–∞",
            switch_inline_query=f"üî• –ü–æ–ø—Ä–æ–±—É–π –æ–∂–∏–≤–∏—Ç—å —Ñ–æ—Ç–æ! –≠—Ç–æ –º–æ—è —Å—Å—ã–ª–∫–∞: {invite_link}"
        )],
    ])

    # ---- –æ—Ç–ø—Ä–∞–≤–∫–∞ ----
    video_path = "assets/main_menu_video.mp4"
    try:
        await update.effective_chat.send_video(
            video=open(video_path, "rb"),
            caption=text,
            parse_mode="Markdown",
            reply_markup=kb
        )
    except Exception:
        await send_or_replace_text(update, context, text, reply_markup=kb)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–≥–ª–∞—Å–∏—è
async def handle_consent_yes(update: Update, context: ContextTypes.DEFAULT_TYPE):
    from sqlalchemy import select
    q = update.callback_query
    await q.answer()

    async with get_session() as session:

        result = await session.execute(select(User).where(User.user_id == q.from_user.id))
        user = result.scalar_one()
        user.consent_accepted = True
        await session.commit()

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é (—á–µ—Ä–µ–∑ billing_core)
        user_gen = billing_core.get_user(q.from_user.id)
        await show_main_menu(update, context, user_gen)


# –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–ª–∞–Ω—Å–∞ –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ "–û–∂–∏–≤–∏—Ç—å —Ñ–æ—Ç–æ"
async def check_balance_and_animate(update: Update, context: ContextTypes.DEFAULT_TYPE):
    q = update.callback_query
    await q.answer()

    user_id = q.from_user.id

    # –õ–æ–≥ –≤ Google Sheets: –Ω–∞–∂–∞–ª –∫–Ω–æ–ø–∫—É "–û–∂–∏–≤–∏—Ç—å —Ñ–æ—Ç–æ"
    asyncio.create_task(gsheets.log_user_event(
        user_id=user_id,
        username=q.from_user.username or "",
        event="click_animate",
        meta={}
    ))

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å –≥–µ–Ω–µ—Ä–∞—Ü–∏–π (—á–µ—Ä–µ–∑ has_generations)
    if not await has_generations(user_id):
        # üí¨ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–µ—Ä–µ–¥ –æ—Ç–∫—Ä—ã—Ç–∏–µ–º –º–µ–Ω—é –æ–ø–ª–∞—Ç—ã
        await send_or_replace_text(update, context, 
            "‚ö†Ô∏è –£ –í–∞—Å –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏.\n"
            "üí≥ –í—ã–±–µ—Ä–∏—Ç–µ —É–¥–æ–±–Ω—ã–π —Ç–∞—Ä–∏—Ñ, —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å ‚ú®"
        )
        
        # üí≥ –°—Ä–∞–∑—É –æ—Ç–∫—Ä—ã–≤–∞–µ–º –º–µ–Ω—é –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è
        from handlers.balance import open_balance
        await open_balance(update, context)
        return


    # –ï—Å–ª–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –µ—Å—Ç—å ‚Üí –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–æ—Ç–æ
    from handlers.photo import start_animate_flow
    await start_animate_flow(update, context)


# –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è —Å–±—Ä–æ—Å–∞ —Å–æ–≥–ª–∞—Å–∏—è (–¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è)
async def reset_consent(update: Update, context: ContextTypes.DEFAULT_TYPE):
    from sqlalchemy import select
    async with get_session() as session:
        result = await session.execute(select(User).where(User.user_id == update.effective_user.id))
        user = result.scalar_one()
        user.consent_accepted = False
        await session.commit()

    
    await send_or_replace_text(update, context, "‚úÖ –°–æ–≥–ª–∞—Å–∏–µ —Å–±—Ä–æ—à–µ–Ω–æ. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –ø–æ–∫–∞–∑–∞ —Å–æ–≥–ª–∞—à–µ–Ω–∏—è.")
