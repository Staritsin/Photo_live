import os
import aiohttp
import asyncio
import base64
import json
from dotenv import load_dotenv
from typing import Optional, AsyncGenerator

# === –ó–∞–≥—Ä—É–∂–∞–µ–º .env ===
load_dotenv()

# === –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ .env ===
ENGINE = os.getenv("ENGINE", "replicate").lower()  # fal | replicate
REPLICATE_TOKEN = os.getenv("REPLICATE_API_TOKEN")
FAL_KEY = os.getenv("FAL_KEY")


# === –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã ===
REPLICATE_API_BASE = "https://api.replicate.com/v1"
REPLICATE_MODEL_VERSION = "7e324e5fcb9479696f15ab6da262390cddf5a1efa2e11374ef9d1f85fc0f82da"
FAL_API_URL = "https://fal.run/fal-ai/kling-video/v2.5-turbo/pro/image-to-video"


# === –£—Ç–∏–ª–∏—Ç–∞ ===
def encode_image_to_base64(path: str) -> str:
    with open(path, "rb") as f:
        return base64.b64encode(f.read()).decode("utf-8")


# === –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è ===
async def generate_video_from_photo(photo_path: str, duration: int = 5, prompt: Optional[str] = None) -> AsyncGenerator[dict, None]:
    """
    –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä –≤–∏–¥–µ–æ –∏–∑ —Ñ–æ—Ç–æ.
    ‚öôÔ∏è ENGINE=fal ‚Üí Fal.ai
    ‚öôÔ∏è ENGINE=replicate ‚Üí Replicate
    """
    print(f"üé¨ ENGINE: {ENGINE.upper()} | prompt='{prompt}'")

    if ENGINE == "fal":
        try:
            async for res in _generate_fal(photo_path, prompt):
                yield res
                if res.get("status") in ["succeeded", "processing"]:
                    return
        except Exception as e:
            print("‚ö†Ô∏è Fal.ai –æ—à–∏–±–∫–∞:", e)
            yield {"status": "failed", "error": "Fal.ai –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ üôè"}
        return  # ‚ùó –±–µ–∑ fallback

    elif ENGINE == "replicate":
        try:
            async for res in _generate_replicate(photo_path, duration, prompt):
                yield res
                if res.get("status") in ["succeeded", "processing"]:
                    return
        except Exception as e:
            print("‚ö†Ô∏è Replicate –æ—à–∏–±–∫–∞:", e)
            yield {"status": "failed", "error": "Replicate –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ üôè"}
        return

    else:
        yield {"status": "failed", "error": f"‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –¥–≤–∏–∂–æ–∫: {ENGINE}"}


# === Replicate ===
async def _generate_replicate(photo_path: str, duration: int, prompt: Optional[str]):
    if not REPLICATE_TOKEN:
        yield {"status": "failed", "error": "‚ùå –ù–µ—Ç REPLICATE_API_TOKEN"}
        return

    image_b64 = encode_image_to_base64(photo_path)
    payload = {
        "version": REPLICATE_MODEL_VERSION,
        "input": {
            "start_image": f"data:image/jpeg;base64,{image_b64}",
            "prompt": prompt or "A person blinks and smiles",
            "duration": duration
        }
    }
    headers = {"Authorization": f"Token {REPLICATE_TOKEN}", "Content-Type": "application/json"}

    async with aiohttp.ClientSession() as session:
        async with session.post(f"{REPLICATE_API_BASE}/predictions", headers=headers, json=payload) as r:
            if r.status >= 300:
                err = await r.text()
                yield {"status": "failed", "error": f"–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ Replicate: {r.status} {err}"}
                return
            pred = await r.json()
            pred_id = pred.get("id")

        if not pred_id:
            yield {"status": "failed", "error": "‚ùå prediction_id –Ω–µ –Ω–∞–π–¥–µ–Ω"}
            return

        for _ in range(60):
            async with session.get(f"{REPLICATE_API_BASE}/predictions/{pred_id}", headers=headers) as s:
                data = await s.json()
                status = data.get("status")

                if status == "succeeded":
                    out = data.get("output")
                    url = out[-1] if isinstance(out, list) else out
                    yield {"status": "succeeded", "url": url}
                    return
                elif status in ("failed", "canceled"):
                    yield {"status": "failed", "error": data.get("error", "‚ùå –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –Ω–µ —É–¥–∞–ª–∞—Å—å")}
                    return
                else:
                    print("‚è≥ Replicate —Å—Ç–∞—Ç—É—Å:", status)
                    yield {"status": "processing"}

            await asyncio.sleep(10)

        yield {"status": "failed", "error": "‚è≥ –¢–∞–π–º–∞—É—Ç –æ–∂–∏–¥–∞–Ω–∏—è Replicate"}


# === Fal.ai ===
# === Fal.ai ===
# === Fal.ai ===
async def _generate_fal(photo_path: str, prompt: Optional[str]):
    if not FAL_KEY:
        yield {"status": "failed", "error": "‚ùå –ù–µ—Ç FAL_KEY"}
        return

    image_b64 = encode_image_to_base64(photo_path)
    headers = {
        "Authorization": f"Key {FAL_KEY}",
        "Content-Type": "application/json"
    }

    # ‚ö°Ô∏è –í–ù–ò–ú–ê–ù–ò–ï: prompt –∏ image_url —Ç–µ–ø–µ—Ä—å –Ω–∞ –≤–µ—Ä—Ö–Ω–µ–º —É—Ä–æ–≤–Ω–µ
    payload = {
        "prompt": prompt or "A person smiles",
        "image_url": f"data:image/jpeg;base64,{image_b64}",
        "logs": True
    }

    async with aiohttp.ClientSession() as session:
        async with session.post(FAL_API_URL, headers=headers, json=payload) as r:
            raw = await r.text()
            print("üåê FAL response:", raw)
            if r.status >= 300:
                yield {"status": "failed", "error": f"–û—à–∏–±–∫–∞ FAL: {r.status} {raw}"}
                return

            data = json.loads(raw)

    # ‚úÖ –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –≤–∏–¥–µ–æ
    video_url = (
        data.get("video", {}).get("url")
        or data.get("output", {}).get("video_url")
        or data.get("output", {}).get("video", {}).get("url")
        or data.get("url")
    )

    if video_url:
        print("‚úÖ Fal.ai –≤–∏–¥–µ–æ –≥–æ—Ç–æ–≤–æ:", video_url)
        yield {"status": "succeeded", "url": video_url}
    else:
        yield {"status": "failed", "error": f"‚ùå FAL –Ω–µ –≤–µ—Ä–Ω—É–ª —Å—Å—ã–ª–∫—É –Ω–∞ –≤–∏–¥–µ–æ. –û—Ç–≤–µ—Ç: {data}"}
